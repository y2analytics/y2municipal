} else {
suppressMessages(
multi_select_freqs <-
df %>%
dplyr::select(
tidyselect::all_of(multi.vars),
{{ weight.var }}
) %>%
y2clerk::multi_freqs(
unweighted_ns = unweighted.ns,
wt = {{ weight.var }},
prompt = TRUE
)
)
}
} else {
multi_select_freqs <-
tibble::tibble()
}
}
# Numeric Freqs -----------------------------------------------------------
get_nums <-
function(
df,
weight.var,
unweighted.ns,
num.vars
){
if (
length(num.vars) > 0
) {
labels_list <-
df %>%
dplyr::select(
tidyselect::all_of(num.vars)
)
labels <-
tibble::tibble(
prompt = labelled::var_label(labels_list) %>%
as.character(),
label = .data$prompt,
variable = labels_list %>% names
)  %>%
dplyr::mutate(
prompt = stringr::str_remove(.data$label, ' - .+') %>%
stringr::str_trim(),
label = stringr::str_remove(.data$label, '.*\n') %>%
stringr::str_remove('.*- ') %>%
stringr::str_trim()
)
numeric_freqs <-
df %>%
dplyr::select(
tidyselect::all_of(num.vars),
{{ weight.var }}
) %>%
dplyr::mutate(
dplyr::across(
.cols = tidyselect::everything(),
.fns = ~forcats::as_factor(.x) %>%
as.character() %>%
as.numeric()
)
) %>%
y2clerk::freqs(
stat = 'mean',
wt = {{ weight.var }},
nas = FALSE,
unweighted_ns = unweighted.ns
) %>%
dplyr::select(
-'label'
) %>%
dplyr::left_join(
labels,
by = 'variable'
) %>%
dplyr::relocate(
'label',
.after = 'value'
)
} else {
numeric_freqs <-
tibble::tibble()
}
}
# Topline -----------------------------------------------------------------
make_topline <- function(
dataset_top,
single_vars_top,
multi_vars_top,
num_vars_top,
weight_var_top,
unweighted_ns_top,
survey_order_top,
silently
) {
single_select_freqs <-
get_singles(
df = dataset_top,
single.vars = single_vars_top,
weight.var = {{ weight_var_top }},
unweighted.ns = unweighted_ns_top
)
multi_select_freqs <-
get_multis(
df = dataset_top,
multi.vars = multi_vars_top,
weight.var = {{ weight_var_top }},
unweighted.ns = unweighted_ns_top,
silently
)
numeric_freqs <-
get_nums(
df = dataset_top,
num.vars = num_vars_top,
weight.var = {{ weight_var_top }},
unweighted.ns = unweighted_ns_top
)
dplyr::bind_rows(
multi_select_freqs,
single_select_freqs,
numeric_freqs
) %>%
dplyr::mutate(
variable = factor(
.data$variable,
survey_order_top
)
) %>%
dplyr::arrange(
.data$variable,
.data$value
)
}
# Group_freqs -------------------------------------------------------------
combine_grouped_toplines <- function(
dataset_g,
single_vars_g,
multi_vars_g,
num_vars_g,
weight_var_g,
unweighted_ns_g,
survey_order_g,
group_variables_g,
group_variable_labels_g,
silently
) {
dataset_g %>%
dplyr::mutate(
group_var_chr = .data[[group_variables_g]] %>% haven::as_factor() %>% as.character()
) %>%
dplyr::filter(
.data$group_var_chr == group_variable_labels_g
) %>%
make_topline(
single_vars_top = single_vars_g,
multi_vars_top = multi_vars_g,
num_vars_top = num_vars_g,
weight_var_top = {{ weight_var_g }},
unweighted_ns_top = unweighted_ns_g,
survey_order_top = survey_order_g,
silently
) %>%
dplyr::rename_with(
.cols = c('n', 'result'),
~stringr::str_c(
.,
group_variable_labels_g,
sep = ' '
)
) %>%
dplyr::select(
'variable',
'prompt',
'value',
'label',
'stat',
tidyselect::everything()
)
}
# base_ns (ungrouped) ----------------------------------------------------------
base_ns_multi <- function(
dataset,
multi_vars
) {
datalist <- list()
pattern_full <- dataset %>%
dplyr::ungroup() %>%
dplyr::select(tidyselect::all_of(multi_vars)) %>%
names() %>%
stringr::str_remove(
'_[0-9]+$'
) %>%
stringr::str_remove(
'_[0-9]+_TEXT$'
)
pattern <- pattern_full %>%
unique()
# Creating a filtered frequencies dataframe for each stem
for (i in pattern) {
data <- dataset %>%
dplyr::select(
dplyr::starts_with(stringr::str_c(i, '_')),
) %>%
# Following lines filter out rows where none of the questions have been answered
dplyr::mutate(ns = rowSums(
dplyr::across(
.cols = dplyr::starts_with(i),
.fns = ~ifelse(
is.na(.x),
FALSE,
TRUE
)
)
)) %>%
dplyr::filter(
ns > 0
) %>%
dplyr::count() %>%
dplyr::mutate(value = i)
# Adds stem freqs to datalist
datalist[[i]] <- data
}
ns <- dplyr::bind_rows(datalist)
if (nrow(ns) == 0) {
ns <- multi_vars %>%
tibble::as_tibble() %>%
dplyr::mutate(n = .data$value)
}
var_names_multi <- multi_vars %>%
tibble::as_tibble() %>%
dplyr::rename(variable = 'value') %>%
dplyr::bind_cols(tibble::as_tibble(pattern_full))
ns_multi <- dplyr::full_join(
var_names_multi,
ns,
by = 'value'
) %>%
dplyr::select(-'value') %>%
dplyr::mutate(n = as.numeric(.data$n))
}
base_ns_single <- function(
dataset,
multi_vars
) {
var_names_singles <- dataset %>%
dplyr::select(-tidyselect::all_of(multi_vars)) %>%
names
datalist <- list()
for(i in var_names_singles) {
data <- dataset %>%
dplyr::filter(!is.na(i)) %>%
dplyr::count() %>%
dplyr::mutate(variable = i)
datalist[[i]] <- data
}
ns_single <- dplyr::bind_rows(datalist)
}
# base_ns (grouped) ----------------------------------------------------------
base_ns_multi_grouped <- function(
dataset,
multi_vars,
group_variables
) {
datalist <- list()
pattern_full <- dataset %>%
dplyr::ungroup() %>%
dplyr::select(tidyselect::all_of(multi_vars)) %>%
names() %>%
stringr::str_remove(
'_[0-9]+$'
) %>%
stringr::str_remove(
'_[0-9]+_TEXT$'
)
pattern <- pattern_full %>%
unique()
group_variable_labels <- dataset %>%
dplyr::pull(.data[[group_variables]]) %>%
unique()
# Creating a filtered frequencies dataframe for each stem
for (i in pattern) {
data <- dataset %>%
dplyr::group_by(.data[[group_variables]]) %>%
dplyr::select(
dplyr::starts_with(stringr::str_c(i, '_')),
) %>%
# Following lines filter out rows where none of the questions have been answered
dplyr::mutate(ns = rowSums(
dplyr::across(
.cols = dplyr::starts_with(i),
.fns = ~ifelse(
is.na(.x),
FALSE,
TRUE
)
)
)) %>%
dplyr::filter(
ns > 0
) %>%
dplyr::count() %>%
dplyr::mutate(
value = i,
x = stringr::str_c('base_ns ', .data[[group_variables]])
) %>%
tidyr::pivot_wider(
names_from = 'x',
values_from = 'n',
id_cols = -tidyr::all_of(group_variables)
)
# Adds stem freqs to datalist
datalist[[i]] <- data
}
ns <- dplyr::bind_rows(datalist)
if (nrow(ns) == 0) {
ns <- data.frame(
matrix(
nrow = 0,
ncol = length(group_variable_labels) + 1
)
)
colnames(ns) <- c(
'value',
stringr::str_c('base_ns ', group_variable_labels)
)
ns$value <- as.character(ns$value)
}
var_names_multi <- multi_vars %>%
tibble::as_tibble() %>%
dplyr::rename(variable = 'value') %>%
dplyr::bind_cols(tibble::as_tibble(pattern_full))
ns_multi <- dplyr::full_join(
var_names_multi,
ns,
by = 'value'
) %>%
dplyr::select(-'value') %>%
dplyr::mutate(
dplyr::across(
.cols = tidyselect::starts_with('base_ns'),
.fns = ~as.numeric(.x)
)
)
}
base_ns_single_grouped <- function(
dataset,
multi_vars,
group_variables
) {
var_names_singles <- dataset %>%
dplyr::select(
-tidyselect::all_of(multi_vars),
-tidyselect::all_of(group_variables)
) %>%
names
datalist <- list()
for(i in var_names_singles) {
data <- dataset %>%
dplyr::group_by(.data[[group_variables]]) %>%
dplyr::filter(!is.na(i)) %>%
dplyr::count() %>%
dplyr::mutate(
variable = i,
x = stringr::str_c('base_ns ', .data[[group_variables]])
) %>%
tidyr::pivot_wider(
names_from = 'x',
values_from = 'n',
id_cols = -tidyr::all_of(group_variables)
)
datalist[[i]] <- data
}
ns_single <- dplyr::bind_rows(datalist)
}
frequencies <- responses %>% group_by(district) %>% topline_freqs()
View(frequencies)
write_csv(
frequencies,
'~/Desktop/test.csv'
)
# Set up the working directory to make package
library(tidyverse)
library(devtools)
library(roxygen2)
install_github('y2analytics/y2municipal')
tibble::tibble(
names = c(
'Daninel',
'Ethan',
'Jared',
'Nick',
'Wallace'
)
)
?sample
tibble::tibble(
names = c(
'Daninel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c('Blue', 'Black', 'Red', 'Green', 'White'),
n = 5
)
)
tibble::tibble(
names = c(
'Daninel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c('Blue', 'Black', 'Red', 'Green', 'White'),
size = 5
)
)
tibble::tibble(
names = c(
'Daninel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c('Blue', 'Black', 'Red', 'Green', 'White'),
size = 5
)
)
set.seed(8978645)
tibble::tibble(
names = c(
'Daniel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c(
'Blue',
'Black',
'Red',
'Green',
'White'),
size = 5
)
)
set.seed(8978644)
tibble::tibble(
names = c(
'Daniel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c(
'Blue',
'Black',
'Red',
'Green',
'White'),
size = 5
)
)
set.seed(8978643)
tibble::tibble(
names = c(
'Daniel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c(
'Blue',
'Black',
'Red',
'Green',
'White'),
size = 5
)
)
set.seed(8978645)
tibble::tibble(
names = c(
'Daniel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c(
'Blue',
'Black',
'Red',
'Green',
'White'),
size = 5
)
)
