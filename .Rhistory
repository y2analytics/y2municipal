silently
) {
dataset_g %>%
dplyr::mutate(
group_var_chr = .data[[group_variables_g]] %>% haven::as_factor() %>% as.character()
) %>%
dplyr::filter(
.data$group_var_chr == group_variable_labels_g
) %>%
make_topline(
single_vars_top = single_vars_g,
multi_vars_top = multi_vars_g,
num_vars_top = num_vars_g,
weight_var_top = {{ weight_var_g }},
unweighted_ns_top = unweighted_ns_g,
survey_order_top = survey_order_g,
silently
) %>%
dplyr::rename_with(
.cols = c('n', 'result'),
~stringr::str_c(
.,
group_variable_labels_g,
sep = ' '
)
) %>%
dplyr::select(
'variable',
'prompt',
'value',
'label',
'stat',
tidyselect::everything()
)
}
# base_ns (ungrouped) ----------------------------------------------------------
base_ns_multi <- function(
dataset,
multi_vars
) {
datalist <- list()
pattern_full <- dataset %>%
dplyr::ungroup() %>%
dplyr::select(tidyselect::all_of(multi_vars)) %>%
names() %>%
stringr::str_remove(
'_[0-9]+$'
) %>%
stringr::str_remove(
'_[0-9]+_TEXT$'
)
pattern <- pattern_full %>%
unique()
# Creating a filtered frequencies dataframe for each stem
for (i in pattern) {
data <- dataset %>%
dplyr::select(
dplyr::starts_with(stringr::str_c(i, '_')),
) %>%
# Following lines filter out rows where none of the questions have been answered
dplyr::mutate(ns = rowSums(
dplyr::across(
.cols = dplyr::starts_with(i),
.fns = ~ifelse(
is.na(.x),
FALSE,
TRUE
)
)
)) %>%
dplyr::filter(
ns > 0
) %>%
dplyr::count() %>%
dplyr::mutate(value = i)
# Adds stem freqs to datalist
datalist[[i]] <- data
}
ns <- dplyr::bind_rows(datalist)
if (nrow(ns) == 0) {
ns <- multi_vars %>%
tibble::as_tibble() %>%
dplyr::mutate(n = .data$value)
}
var_names_multi <- multi_vars %>%
tibble::as_tibble() %>%
dplyr::rename(variable = 'value') %>%
dplyr::bind_cols(tibble::as_tibble(pattern_full))
ns_multi <- dplyr::full_join(
var_names_multi,
ns,
by = 'value'
) %>%
dplyr::select(-'value') %>%
dplyr::mutate(n = as.numeric(.data$n))
}
base_ns_single <- function(
dataset,
multi_vars
) {
var_names_singles <- dataset %>%
dplyr::select(-tidyselect::all_of(multi_vars)) %>%
names
datalist <- list()
for(i in var_names_singles) {
data <- dataset %>%
dplyr::filter(!is.na(i)) %>%
dplyr::count() %>%
dplyr::mutate(variable = i)
datalist[[i]] <- data
}
ns_single <- dplyr::bind_rows(datalist)
}
# base_ns (grouped) ----------------------------------------------------------
base_ns_multi_grouped <- function(
dataset,
multi_vars,
group_variables
) {
datalist <- list()
pattern_full <- dataset %>%
dplyr::ungroup() %>%
dplyr::select(tidyselect::all_of(multi_vars)) %>%
names() %>%
stringr::str_remove(
'_[0-9]+$'
) %>%
stringr::str_remove(
'_[0-9]+_TEXT$'
)
pattern <- pattern_full %>%
unique()
group_variable_labels <- dataset %>%
dplyr::pull(.data[[group_variables]]) %>%
unique()
# Creating a filtered frequencies dataframe for each stem
for (i in pattern) {
data <- dataset %>%
dplyr::group_by(.data[[group_variables]]) %>%
dplyr::select(
dplyr::starts_with(stringr::str_c(i, '_')),
) %>%
# Following lines filter out rows where none of the questions have been answered
dplyr::mutate(ns = rowSums(
dplyr::across(
.cols = dplyr::starts_with(i),
.fns = ~ifelse(
is.na(.x),
FALSE,
TRUE
)
)
)) %>%
dplyr::filter(
ns > 0
) %>%
dplyr::count() %>%
dplyr::mutate(
value = i,
x = stringr::str_c('base_ns ', .data[[group_variables]])
) %>%
tidyr::pivot_wider(
names_from = 'x',
values_from = 'n',
id_cols = -tidyr::all_of(group_variables)
)
# Adds stem freqs to datalist
datalist[[i]] <- data
}
ns <- dplyr::bind_rows(datalist)
if (nrow(ns) == 0) {
ns <- data.frame(
matrix(
nrow = 0,
ncol = length(group_variable_labels) + 1
)
)
colnames(ns) <- c(
'value',
stringr::str_c('base_ns ', group_variable_labels)
)
ns$value <- as.character(ns$value)
}
var_names_multi <- multi_vars %>%
tibble::as_tibble() %>%
dplyr::rename(variable = 'value') %>%
dplyr::bind_cols(tibble::as_tibble(pattern_full))
ns_multi <- dplyr::full_join(
var_names_multi,
ns,
by = 'value'
) %>%
dplyr::select(-'value') %>%
dplyr::mutate(
dplyr::across(
.cols = tidyselect::starts_with('base_ns'),
.fns = ~as.numeric(.x)
)
)
}
base_ns_single_grouped <- function(
dataset,
multi_vars,
group_variables
) {
var_names_singles <- dataset %>%
dplyr::select(
-tidyselect::all_of(multi_vars),
-tidyselect::all_of(group_variables)
) %>%
names
datalist <- list()
for(i in var_names_singles) {
data <- dataset %>%
dplyr::group_by(.data[[group_variables]]) %>%
dplyr::filter(!is.na(i)) %>%
dplyr::count() %>%
dplyr::mutate(
variable = i,
x = stringr::str_c('base_ns ', .data[[group_variables]])
) %>%
tidyr::pivot_wider(
names_from = 'x',
values_from = 'n',
id_cols = -tidyr::all_of(group_variables)
)
datalist[[i]] <- data
}
ns_single <- dplyr::bind_rows(datalist)
}
frequencies <- responses %>% group_by(district) %>% topline_freqs()
View(frequencies)
write_csv(
frequencies,
'~/Desktop/test.csv'
)
# Set up the working directory to make package
library(tidyverse)
library(devtools)
library(roxygen2)
install_github('y2analytics/y2municipal')
tibble::tibble(
names = c(
'Daninel',
'Ethan',
'Jared',
'Nick',
'Wallace'
)
)
?sample
tibble::tibble(
names = c(
'Daninel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c('Blue', 'Black', 'Red', 'Green', 'White'),
n = 5
)
)
tibble::tibble(
names = c(
'Daninel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c('Blue', 'Black', 'Red', 'Green', 'White'),
size = 5
)
)
tibble::tibble(
names = c(
'Daninel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c('Blue', 'Black', 'Red', 'Green', 'White'),
size = 5
)
)
set.seed(8978645)
tibble::tibble(
names = c(
'Daniel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c(
'Blue',
'Black',
'Red',
'Green',
'White'),
size = 5
)
)
set.seed(8978644)
tibble::tibble(
names = c(
'Daniel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c(
'Blue',
'Black',
'Red',
'Green',
'White'),
size = 5
)
)
set.seed(8978643)
tibble::tibble(
names = c(
'Daniel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c(
'Blue',
'Black',
'Red',
'Green',
'White'),
size = 5
)
)
set.seed(8978645)
tibble::tibble(
names = c(
'Daniel',
'Ethan',
'Jared',
'Nick',
'Wallace'
),
colors = sample(
x = c(
'Blue',
'Black',
'Red',
'Green',
'White'),
size = 5
)
)
install.packages(c("deldir", "Matrix", "sys"))
covr::report()
# prep_data ---------------------------------------------------------------
my_df <- tibble(
nums = c(1:3),
names = c('Bulbasaur', 'Ivysaur', 'Venusaur'),
facts = forcats::as_factor(c('Bulbasaur', 'Ivysaur', 'Venusaur'))
)
# prep_data ---------------------------------------------------------------
my_df <-tibble:: tibble(
nums = c(1:3),
names = c('Bulbasaur', 'Ivysaur', 'Venusaur'),
facts = forcats::as_factor(c('Bulbasaur', 'Ivysaur', 'Venusaur'))
)
# prep_data ---------------------------------------------------------------
library(readr)
library(tidyverse)
# prep_data ---------------------------------------------------------------
library(writexl)
write_csv(
my_df,
'~/Documents/GitHub/y2municipal/tests/testthat/test_data.csv'
)
write_sav(
my_df,
'~/Documents/GitHub/y2municipal/tests/testthat/test_data.sav'
)
library(ha)
library(haven)
write_sav(
my_df,
'~/Documents/GitHub/y2municipal/tests/testthat/test_data.sav'
)
write_rds(
my_df,
'~/Documents/GitHub/y2municipal/tests/testthat/test_data.rds'
)
write_sas(
my_df,
'~/Documents/GitHub/y2municipal/tests/testthat/test_data.spss'
)
?write_xpt
write_xpt(
my_df,
'~/Documents/GitHub/y2municipal/tests/testthat/test_data.spss'
)
write_xlsx(
my_df,
'~/Documents/GitHub/y2municipal/tests/testthat/test_data.xlsx'
)
### prep_data
prep_data <- function(file_name) {
if (stringr::str_detect(file_name, '.csv')) {
responses <- readr::read_csv(stringr::str_c(DATA_PATH, file_name))
} else if (stringr::str_detect(file_name, '.rds')) {
responses <- readr::read_rds(stringr::str_c(DATA_PATH, file_name))
} else if (stringr::str_detect(file_name, '.sav')) {
responses <- haven::read_sav(stringr::str_c(DATA_PATH, file_name))
} else if (stringr::str_detect(file_name, '.spss')) {
responses <- haven::read_sav(stringr::str_c(DATA_PATH, file_name))
} else if (stringr::str_detect(file_name, '.xlsx')) {
responses <- readxl::read_xlsx(stringr::str_c(DATA_PATH, file_name))
} else {
stop('data type should be one of .csv; .rds; .sav; .spss; .xlsx')
}
}
prep_data('~/Documents/GitHub/y2municipal/tests/testthat/test_data.xlsx')
DATA_PATH <- ''
prep_data('test_data.xlsx')
DATA_PATH <- '/'
prep_data('test_data.xlsx')
??add_fonts
??add_fonts
# Set up the working directory to make package
library(tidyverse)
library(devtools)
library(roxygen2)
install_github('y2analytics/y2municipal')
# Process documentation
setwd('~/Documents/GitHub/y2municipal/')
document()
dataset <- tibble::tibble(
s_var = c(1, 2),
m_var_1 = c(1, NA_real_),
m_var_2 = c(1, NA_real_),
n_var = c(0, 50),
weights = c(1, 2)
)
frequencies_unweighted <- topline_freqs(
dataset,
silently = TRUE
)
frequencies_weighted <- topline_freqs(
dataset,
silently = TRUE,
weight_var = weights
)
frequencies_weighted_weightedns <- topline_freqs(
dataset,
silently = TRUE,
weight_var = weights,
unweighted_ns = FALSE
)
View(frequencies_unweighted)
View(frequencies_weighted)
View(frequencies_weighted_weightedns)
# Set up the working directory to make package
library(tidyverse)
library(devtools)
library(roxygen2)
install_github('y2analytics/y2municipal')
# Process documentation
setwd('~/Documents/GitHub/y2municipal/')
document()
check()
# Process documentation
setwd('~/Documents/GitHub/y2municipal/')
# Set up the working directory to make package
library(tidyverse)
library(devtools)
library(roxygen2)
install_github('y2analytics/y2municipal')
# Process documentation
setwd('~/Documents/GitHub/y2municipal/')
document()
check()
covr::report()
# Adding these for testing
devtools::load_all()
devtools::test_active_file()
usethis::use_github_action("test-coverage")
# Set up the working directory to make package
library(tidyverse)
library(devtools)
library(roxygen2)
install_github('y2analytics/y2municipal')
# Process documentation
setwd('~/Documents/GitHub/y2municipal/')
document()
check()
covr::report()
# Process documentation
setwd('~/Documents/GitHub/y2municipal/')
document()
devtools::document()
covr::report()
