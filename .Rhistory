error_message
)
}
dataset <-
dataset %>%
dplyr::ungroup()
group_variable_labels <-
dataset %>%
dplyr::select(
dplyr::all_of(group_variables)
) %>%
y2clerk::freqs() %>%
dplyr::pull(
.data$label
)
grouped_data = TRUE
} else {
grouped_data = FALSE
}
# Check for a weight variable ---------------------------------------------
if (
dataset %>%
dplyr::select(
{{ weight_var }}
) %>%
names() %>%
length == 0
) {
dataset <-
dataset %>%
dplyr::mutate(
weights = 1
)
weight_var <-
as.symbol('weights')
}
# Assign Variable types ---------------------------------------------------
single_vars <-
dataset %>%
dplyr::select(
tidyselect::starts_with('s_'),
{{ assign_s }},
-tidyselect::ends_with('_TEXT'),
-{{ assign_m }},
-{{ assign_n }}
) %>%
names
multi_vars <-
dataset %>%
dplyr::select(
tidyselect::starts_with('m_'),
tidyselect::starts_with('md_'),
{{ assign_m }},
-tidyselect::ends_with('_TEXT'),
-{{ assign_s }},
-{{ assign_n }}
) %>%
names
num_vars <-
dataset %>%
dplyr::select(
tidyselect::starts_with('cs_'),
tidyselect::starts_with('sl_'),
tidyselect::starts_with('n_'),
tidyselect::starts_with('r_'),
{{ assign_n }},
-tidyselect::ends_with('_TEXT'),
-{{ assign_m }},
-{{ assign_s }}
) %>%
names
# Get lists of run and unrun variables ------------------------------------
survey_order <-
dataset %>%
dplyr::select(
-c(
!tidyselect::all_of(single_vars) &
!tidyselect::all_of(multi_vars) &
!tidyselect::all_of(num_vars)
)
) %>%
names
unrun_vars <-
dataset %>%
dplyr::select(
-{{ weight_var }},
-tidyselect::starts_with('oe_'),
-tidyselect::ends_with('_TEXT')
) %>%
names %>%
setdiff(
c(
'StartDate',
'EndDate',
'Status',
'IPAddress',
'Progress',
'Duration__in_seconds_',
'Finished',
'RecordedDate',
'ResponseId',
'RecipientLastName',
'RecipientFirstName',
'RecipientEmail',
'ExternalReference',
'LocationLatitude',
'LocationLongitude',
'DistributionChannel',
'UserLanguage',
'ExternalReference',
'term',
'gc'
)
) %>%
setdiff(
survey_order
)
if (length(unrun_vars) >= 1 & silently == FALSE) {
message(
stringr::str_c(
"In addition to standard Qualtrics variables, the following variables from your dataset were not included in the topline:\n",
unrun_vars %>% stringr::str_flatten(', ')
)
)
}
# Get Topline -------------------------------------------------------------
if (
grouped_data == TRUE
) {
topline_results <-
purrr::map(
group_variable_labels,
~combine_grouped_toplines(
dataset_g = dataset,
single_vars_g = single_vars,
multi_vars_g = multi_vars,
num_vars_g = num_vars,
weight_var_g = {{ weight_var }},
unweighted_ns_g = unweighted_ns,
survey_order_g = survey_order,
group_variables_g = group_variables,
group_variable_labels_g = .x,
silently
)
) %>%
purrr::reduce(
dplyr::left_join,
by = c(
'variable',
'prompt',
'value',
'label',
'stat'
)
)
multi_ns <- base_ns_multi_grouped(dataset, multi_vars, group_variables)
ns_single <- base_ns_single_grouped(dataset, multi_vars, group_variables)
base_ns <- dplyr::bind_rows(ns_single, multi_ns)
} else {
topline_results <-
make_topline(
dataset_top = dataset,
single_vars_top = single_vars,
multi_vars_top = multi_vars,
num_vars_top = num_vars,
weight_var_top = {{ weight_var }},
unweighted_ns_top = unweighted_ns,
survey_order_top = survey_order,
silently
)
multi_ns <- base_ns_multi(dataset, multi_vars)
ns_single <- base_ns_single(dataset, multi_vars)
base_ns <- dplyr::bind_rows(ns_single, multi_ns) %>%
dplyr::rename(base_ns = 'n')
}
topline_results <- topline_results %>%
dplyr::left_join(base_ns, by = 'variable')
topline_results
}
get_singles <-
function(
df,
weight.var,
unweighted.ns,
single.vars
) {
if (
length(single.vars) > 0
) {
single_select_freqs <-
df %>%
dplyr::select(
tidyselect::all_of(single.vars),
{{ weight.var }}
) %>%
y2clerk::freqs(
unweighted_ns = unweighted.ns,
wt = {{ weight.var }},
prompt = TRUE,
nas = FALSE
)
} else {
single_select_freqs <-
tibble::tibble()
}
single_select_freqs
}
topline_results <-
purrr::map(
group_variable_labels,
~combine_grouped_toplines(
dataset_g = dataset,
single_vars_g = single_vars,
multi_vars_g = multi_vars,
num_vars_g = num_vars,
weight_var_g = {{ weight_var }},
unweighted_ns_g = unweighted_ns,
survey_order_g = survey_order,
group_variables_g = group_variables,
group_variable_labels_g = .x,
silently
)
) %>%
purrr::reduce(
dplyr::left_join,
by = c(
'variable',
'prompt',
'value',
'label',
'stat'
)
)
multi_ns <- base_ns_multi_grouped(dataset, multi_vars, group_variables)
ns_single <- base_ns_single_grouped(dataset, multi_vars, group_variables)
base_ns <- dplyr::bind_rows(ns_single, multi_ns)
covr::report()
covr::report()
dataset <- tibble::tibble(
StartDate = c(lubridate::mdy_hms('Jan 1 2022 10:00:00'), lubridate::mdy_hms( 'Feb 1 2022 10:00:00')),
EndDate = c(lubridate::mdy_hms('Jan 1 2022 10:00:10'), lubridate::mdy_hms( 'Feb 1 2022 10:00:30')),
Dureation_in_seconds = c(600, 1800)
)
methodology(dataset)
methodology(dataset, 100000)
dataset <- tibble::tibble(
StartDate = c(lubridate::mdy_hms('Jan 1 2022 10:00:00'), lubridate::mdy_hms( 'Feb 1 2022 10:00:00')),
EndDate = c(lubridate::mdy_hms('Jan 1 2022 10:00:10'), lubridate::mdy_hms( 'Feb 1 2022 10:00:30')),
Duration__in_seconds_ = c(600, 1800)
)
methodology(dataset, 100000)
methodology(dataset, 100000) %>% glimpse()
methodology(dataset, 100000) %>% class()
test_that("No errors", {
dataset <- tibble::tibble(
StartDate = c(lubridate::mdy_hms('Jan 1 2022 10:00:00'), lubridate::mdy_hms( 'Feb 1 2022 10:00:00')),
EndDate = c(lubridate::mdy_hms('Jan 1 2022 10:00:10'), lubridate::mdy_hms( 'Feb 1 2022 10:00:30')),
Duration__in_seconds_ = c(600, 1800)
)
expect_error(
methodology(dataset, 100000),
regexp = NA
)
})
dataset <- tibble::tibble(
StartDate = c(rep(lubridate::mdy_hms('Jan 1 2022 10:00:00'), 100)),
EndDate = c(rep(lubridate::mdy_hms('Jan 1 2022 10:00:10'), 100)),
Duration__in_seconds_ = c(rep(600, 100))
)
get_moe(dataset, population = 100000)
expect_equal(
get_moe(dataset, population = 100000),
'MOE: +/- 9.8'
)
expect_equal(
get_moe(dataset, population = 100000),
'MOE: +/- 9.80'
)
expect_equal(
get_field_dates(dataset, 100000),
'Fielded Jan 1 - Feb 1'
)
test_that("Field Dates", {
dataset <- tibble::tibble(
StartDate = c(lubridate::mdy_hms('Jan 1 2022 10:00:00'), lubridate::mdy_hms( 'Feb 1 2022 10:00:00')),
EndDate = c(lubridate::mdy_hms('Jan 1 2022 10:00:10'), lubridate::mdy_hms( 'Feb 1 2022 10:00:30')),
Duration__in_seconds_ = c(600, 1800)
)
expect_equal(
get_field_dates(dataset, 100000),
'Fielded Jan 1 - Feb 1'
)
})
dataset <- tibble::tibble(
StartDate = c(lubridate::mdy_hms('Jan 1 2022 10:00:00'), lubridate::mdy_hms( 'Feb 1 2022 10:00:00')),
EndDate = c(lubridate::mdy_hms('Jan 1 2022 10:00:10'), lubridate::mdy_hms( 'Feb 1 2022 10:00:30')),
Duration__in_seconds_ = c(600, 1800)
)
expect_equal(
get_field_dates(dataset),
'Fielded Jan 1 - Feb 1'
)
expect_equal(
get_field_dates(dataset),
'Fielded: Jan 1 - Feb 1'
)
dataset <- tibble::tibble(
StartDate = c(rep(lubridate::mdy_hms('Jan 1 2022 10:00:00'), 100), lubridate::mdy_hms( 'Feb 1 2022 10:00:00')),
EndDate = c(rep(lubridate::mdy_hms('Jan 1 2022 10:00:10'), 100), lubridate::mdy_hms( 'Feb 1 2022 10:00:30')),
Duration__in_seconds_ = c(rep(600, 100), 1800)
)
loi_minutes_untrimmed <- (mean(dataset$Duration__in_seconds_) / 60) %>% round(1)
loi_minutes_trimmed <- (mean(dataset$Duration__in_seconds_, trim = 0.025) / 60)  %>% round(1)
loi_minutes_untrimmed_char <- stringr::str_c('Mean LOI: ', loi_minutes_untrimmed, ' minutes')
loi_minutes_trimmed_char <- stringr::str_c('Mean LOI trimmed: ', loi_minutes_trimmed, ' minutes')
dataset <- tibble::tibble(
StartDate = c(rep(lubridate::mdy_hms('Jan 1 2022 10:00:00'), 98), lubridate::mdy_hms( 'Feb 1 2022 10:00:00')),
EndDate = c(rep(lubridate::mdy_hms('Jan 1 2022 10:00:10'), 98), lubridate::mdy_hms( 'Feb 1 2022 10:00:30')),
Duration__in_seconds_ = c(rep(600, 98), 1800)
)
loi_minutes_untrimmed <- (mean(dataset$Duration__in_seconds_) / 60) %>% round(1)
loi_minutes_trimmed <- (mean(dataset$Duration__in_seconds_, trim = 0.025) / 60)  %>% round(1)
loi_minutes_untrimmed_char <- stringr::str_c('Mean LOI: ', loi_minutes_untrimmed, ' minutes')
loi_minutes_trimmed_char <- stringr::str_c('Mean LOI trimmed: ', loi_minutes_trimmed, ' minutes')
expect_equal(
loi_minutes_trimmed_char,
'Mean LOI trimmed: 10 minutes'
)
expect_equal(
loi_minutes_untrimmed_char,
'Mean LOI untrimmed: 10.2 minutes'
)
expect_equal(
loi_minutes_untrimmed_char,
'Mean LOI: 10.2 minutes'
)
expect_equal(
loi_minutes_trimmed_char,
'Mean LOI trimmed: 10 minutes'
)
600 * 98 + 1800
60600/99
60600/99/60
devtools::test_active_file()
# Set up the working directory to make package
library(tidyverse)
library(devtools)
library(roxygen2)
devtools::test_active_file()
covr::report()
dataset <- tibble::tibble(
s_var = 1,
m_var_1 = 1,
m_var_2 = NA_real_,
m_var_3 = 1,
m_var_3_TEXT = 'Other text',
oe_var = 'a lot of text',
n_var = 875,
r_var_1 = 1,
r_var_2 = 2,
r_var_3 = 3,
md_var_1 = 1,
md_var_2 = NA_real_,
md_var_3 = 1,
M_RACE_1 = 'white',
M_RACE_2 = 'black',
q1 = 'a not correctly named question',
weights = 2.1
)
topline_appendix(dataset)
topline_appendix(dataset) %>%
dplyr::select(variable)
dataset <- tibble::tibble(
s_var = 1,
m_var_1 = 1,
m_var_3_TEXT = 'Other text',
oe_var = 'a lot of text',
q1 = 'a not correctly named question',
q2 = 'and another',
weights = 2.1
)
vars_freqd <- topline_appendix(
dataset,
assign_oe = c(q1, q2)
) %>%
dplyr::select(variable) %>%
purrr::as_vector() %>%
as.character()
expect_equal(
vars_freqd,
c('oe_var', 'm_var_3_TEXT', 'q1', 'q2')
)
dataset <- tibble::tibble(
m_var_3_TEXT = 'Other text',
oe_var = 'a lot of text',
oe_2 = 'a not correctly named question'
)
topline_appendix(dataset)
frequencies <- topline_appendix(dataset)
class(frequencies)
devtools::test_active_file()
devtools::test_active_file()
dataset <- tibble::tibble(
s_var = 1,
m_var_1 = 1,
m_var_2 = NA_real_,
m_var_3 = 1,
m_var_3_TEXT = 'Other text',
oe_var = 'a lot of text',
n_var = 875,
r_var_1 = 1,
r_var_2 = 2,
r_var_3 = 3,
md_var_1 = 1,
md_var_2 = NA_real_,
md_var_3 = 1,
M_RACE_1 = 'white',
M_RACE_2 = 'black',
q1 = 'a not correctly named question',
weights = 2.1
)
labelled::var_label(dataset$m_var_3_TEXT) <- 'Specify the thing'
labelled::var_label(dataset$oe_var) <- 'Write some stuff'
vars_freqd <- topline_appendix(dataset) %>%
dplyr::select(variable) %>%
purrr::as_vector() %>%
as.character()
expect_equal(
vars_freqd,
c('oe_var', 'm_var_3_TEXT')
)
dataset <- tibble::tibble(
m_var_3_TEXT = 'Other text',
oe_var = 'a lot of text',
oe_2 = 'a not correctly named question'
)
labelled::var_label(dataset$m_var_3_TEXT) <- 'Specify the thing'
labelled::var_label(dataset$oe_var) <- 'Write some stuff'
labelled::var_label(dataset$oe_2) <- 'Write some stuff again'
frequencies <- topline_appendix(dataset)
expect_equal(
class(frequencies),
c('tbl_df', 'tbl', 'data.frame')
)
expect_equal(
names(frequencies),
c('variable', 'prompt', 'label')
)
expect_equal(
frequencies %>% dplyr::pull(label),
c('a lot of text', 'a not correctly named question', 'Other text')
)
dataset <- tibble::tibble(
s_var = 1,
m_var_1 = 1,
m_var_3_TEXT = 'Other text',
oe_var = 'a lot of text',
q1 = 'a not correctly named question',
q2 = 'and another',
weights = 2.1
)
dataset <- tibble::tibble(
s_var = 1,
m_var_1 = 1,
m_var_3_TEXT = 'Other text',
oe_var = 'a lot of text',
q1 = 'a not correctly named question',
q2 = 'and another',
weights = 2.1
)
labelled::var_label(dataset$m_var_3_TEXT) <- 'Specify the thing'
labelled::var_label(dataset$oe_var) <- 'Write some stuff'
labelled::var_label(dataset$oe_2) <- 'question prompt'
labelled::var_label(dataset$oe_2) <- 'question prompt pt 2'
labelled::var_label(dataset$q1) <- 'question prompt'
labelled::var_label(dataset$q2) <- 'question prompt pt 2'
vars_freqd <- topline_appendix(
dataset,
assign_oe = c(q1, q2)
) %>%
dplyr::select(variable) %>%
purrr::as_vector() %>%
as.character()
expect_equal(
vars_freqd,
c('oe_var', 'm_var_3_TEXT', 'q1', 'q2')
)
devtools::test_active_file()
dataset <- tibble::tibble(
m_var_3_TEXT = 'Other text',
oe_var = 'a lot of text'
)
expect_warning(
topline_appendix(dataset),
'You are working with variables that have no labeling. You may want to consider adding a prompt before continuing'
)
# Process documentation
setwd('~/Documents/GitHub/y2municipal/')
document()
?starts_with
?across
?pivot_wider
# Set up the working directory to make package
library(tidyverse)
library(devtools)
library(roxygen2)
install_github('y2analytics/y2municipal')
# Process documentation
setwd('~/Documents/GitHub/y2municipal/')
document()
usethis::use_github_action("test-coverage")
gitcreds::gitcreds_set()
